// Code generated by tygo. DO NOT EDIT.
// Generated types for Commercify API
// Do not edit this file directly 
//////////
// source: cart.go

/**
 * CartDTO represents a shopping cart in the system
 */
export interface CartDTO {
  BaseDTO: BaseDTO;
  user_id: number /* uint */;
  session_id: string;
  items: CartItemDTO[];
}
/**
 * CartItemDTO represents an item in a shopping cart
 */
export interface CartItemDTO {
  BaseDTO: BaseDTO;
  product_id: number /* uint */;
  variant_id?: number /* uint */;
  quantity: number /* int */;
}
/**
 * AddToCartRequest represents the data needed to add an item to the cart
 */
export interface AddToCartRequest {
  product_id: number /* uint */;
  variant_id?: number /* uint */;
  quantity: number /* int */;
}
/**
 * UpdateCartItemRequest represents the data needed to update a cart item
 */
export interface UpdateCartItemRequest {
  quantity: number /* int */;
  variant_id?: number /* uint */;
}
/**
 * CartListResponse represents a paginated list of carts
 */
export interface CartListResponse {
  ListResponseDTO: ListResponseDTO<CartDTO>;
}
/**
 * CartSearchRequest represents the parameters for searching carts
 */
export interface CartSearchRequest {
  user_id?: number /* uint */;
  PaginationDTO: PaginationDTO;
}

//////////
// source: common.go

/**
 * BaseDTO contains common fields for all DTOs
 */
export interface BaseDTO {
  id: number /* uint */;
  created_at: string;
  updated_at: string;
}
/**
 * PaginationDTO represents pagination parameters
 */
export interface PaginationDTO {
  page: number /* int */;
  page_size: number /* int */;
  total: number /* int */;
}
/**
 * ResponseDTO is a generic response wrapper
 */
export interface ResponseDTO<T extends any> {
  success: boolean;
  message?: string;
  data?: T;
  error?: string;
}
/**
 * ListResponseDTO is a generic list response wrapper
 */
export interface ListResponseDTO<T extends any> {
  success: boolean;
  message?: string;
  data?: T[];
  pagination?: PaginationDTO;
  error?: string;
}

//////////
// source: order.go

/**
 * OrderDTO represents an order in the system
 */
export interface OrderDTO {
  BaseDTO: BaseDTO;
  user_id: number /* uint */;
  order_number: string;
  items?: OrderItemDTO[];
  status: OrderStatus;
  total_amount: number /* float64 */;
  final_amount: number /* float64 */;
  currency: string;
  shipping_address?: AddressDTO;
  billing_address?: AddressDTO;
  payment_provider: PaymentProvider;
  payment_id: string;
  shipping_method_id: number /* uint */;
  shipping_cost: number /* float64 */;
  discount_amount: number /* float64 */;
  discount_code?: string;
  customer?: CustomerDetails;
  action_url?: string;
}
export interface CustomerDetails {
  email: string;
  phone: string;
  full_name: string;
}
/**
 * OrderItemDTO represents an item in an order
 */
export interface OrderItemDTO {
  BaseDTO: BaseDTO;
  order_id: number /* uint */;
  product_id: number /* uint */;
  variant_id?: number /* uint */;
  quantity: number /* int */;
  unit_price: number /* float64 */;
  total_price: number /* float64 */;
}
/**
 * AddressDTO represents a shipping or billing address
 */
export interface AddressDTO {
  address_line1: string;
  address_line2?: string;
  city: string;
  state: string;
  postal_code: string;
  country: string;
}
/**
 * CreateOrderRequest represents the data needed to create a new order
 */
export interface CreateOrderRequest {
  first_name: string;
  last_name: string;
  email: string;
  phone_number?: string;
  shipping_address: AddressDTO;
  billing_address: AddressDTO;
  shipping_method_id: number /* uint */;
}
/**
 * CreateOrderItemRequest represents the data needed to create a new order item
 */
export interface CreateOrderItemRequest {
  product_id: number /* uint */;
  variant_id?: number /* uint */;
  quantity: number /* int */;
}
/**
 * UpdateOrderRequest represents the data needed to update an existing order
 */
export interface UpdateOrderRequest {
  status?: string;
  payment_status?: string;
  tracking_number?: string;
  estimated_delivery?: string;
}
/**
 * OrderListResponse represents a paginated list of orders
 */
export interface OrderListResponse {
  ListResponseDTO: ListResponseDTO<OrderDTO>;
}
/**
 * OrderSearchRequest represents the parameters for searching orders
 */
export interface OrderSearchRequest {
  user_id?: number /* uint */;
  status?: OrderStatus;
  payment_status?: string;
  start_date?: string;
  end_date?: string;
  PaginationDTO: PaginationDTO;
}
/**
 * ProcessPaymentRequest represents the data needed to process a payment
 */
export interface ProcessPaymentRequest {
  payment_method: PaymentMethod;
  payment_provider: PaymentProvider;
  card_details?: any /* service.CardDetails */;
  phone_number?: string;
}
/**
 * OrderStatus represents the status of an order
 */
export type OrderStatus = string;
export const OrderStatusPending: OrderStatus = "pending";
export const OrderStatusPendingAction: OrderStatus = "pending_action"; // Requires user action (e.g., redirect to payment provider)
export const OrderStatusPaid: OrderStatus = "paid";
export const OrderStatusCaptured: OrderStatus = "captured"; // Payment captured
export const OrderStatusShipped: OrderStatus = "shipped";
export const OrderStatusDelivered: OrderStatus = "delivered";
export const OrderStatusCancelled: OrderStatus = "cancelled";
export const OrderStatusRefunded: OrderStatus = "refunded";
/**
 * PaymentMethod represents the payment method used for an order
 */
export type PaymentMethod = string;
export const PaymentMethodCard: PaymentMethod = "credit_card";
export const PaymentMethodWallet: PaymentMethod = "wallet";
export const PaymentMethodBank: PaymentMethod = "bank_transfer";
/**
 * PaymentProvider represents the payment provider used for an order
 */
export type PaymentProvider = string;
export const PaymentProviderStripe: PaymentProvider = "stripe";
export const PaymentProviderMobilePay: PaymentProvider = "mobilepay";

//////////
// source: product.go

/**
 * ProductDTO represents a product in the system
 */
export interface ProductDTO {
  BaseDTO: BaseDTO;
  name: string;
  description: string;
  sku: string;
  price: number /* float64 */;
  stock_quantity: number /* int */;
  weight: number /* float64 */;
  category_id: number /* uint */;
  seller_id: number /* uint */;
  images: string[];
  has_variants: boolean;
  variants?: VariantDTO[];
}
/**
 * VariantDTO represents a product variant
 */
export interface VariantDTO {
  BaseDTO: BaseDTO;
  product_id: number /* uint */;
  sku: string;
  price: number /* float64 */;
  compare_price?: number /* float64 */;
  stock_quantity: number /* int */;
  attributes: VariantAttributeDTO[];
  images?: string[];
  is_default: boolean;
}
export interface VariantAttributeDTO {
  name: string;
  value: string;
}
/**
 * CreateProductRequest represents the data needed to create a new product
 */
export interface CreateProductRequest {
  name: string;
  description: string;
  sku: string;
  price: number /* float64 */;
  stock_quantity: number /* int */;
  weight: number /* float64 */;
  category_id: number /* uint */;
  images: string[];
  variants?: CreateVariantRequest[];
}
/**
 * CreateVariantRequest represents the data needed to create a new product variant
 */
export interface CreateVariantRequest {
  sku: string;
  price: number /* float64 */;
  compare_price?: number /* float64 */;
  stock_quantity: number /* int */;
  attributes: VariantAttributeDTO[];
  images?: string[];
  is_default: boolean;
}
/**
 * UpdateProductRequest represents the data needed to update an existing product
 */
export interface UpdateProductRequest {
  name?: string;
  description?: string;
  price?: number /* float64 */;
  stock_quantity?: number /* int */;
  weight?: number /* float64 */;
  category_id?: number /* uint */;
  images?: string[];
}
/**
 * ProductListResponse represents a paginated list of products
 */
export interface ProductListResponse {
  ListResponseDTO: ListResponseDTO<ProductDTO>;
}
/**
 * ProductSearchRequest represents the parameters for searching products
 */
export interface ProductSearchRequest {
  query: string;
  category_id?: number /* uint */;
  min_price?: number /* float64 */;
  max_price?: number /* float64 */;
  PaginationDTO: PaginationDTO;
}

//////////
// source: user.go

/**
 * UserDTO represents a user in the system
 */
export interface UserDTO {
  BaseDTO: BaseDTO;
  email: string;
  first_name: string;
  last_name: string;
  role: string;
  created_at: string;
  updated_at: string;
}
/**
 * CreateUserRequest represents the data needed to create a new user
 */
export interface CreateUserRequest {
  email: string;
  password: string;
  first_name: string;
  last_name: string;
  role: string;
}
/**
 * UpdateUserRequest represents the data needed to update an existing user
 */
export interface UpdateUserRequest {
  first_name?: string;
  last_name?: string;
}
/**
 * UserLoginRequest represents the data needed for user login
 */
export interface UserLoginRequest {
  email: string;
  password: string;
}
/**
 * UserLoginResponse represents the response after successful login
 */
export interface UserLoginResponse {
  user: UserDTO;
  access_token: string;
  refresh_token: string;
  expires_in: number /* int64 */;
}
/**
 * UserListResponse represents a paginated list of users
 */
export interface UserListResponse {
  ListResponseDTO: ListResponseDTO<UserDTO>;
}
/**
 * ChangePasswordRequest represents the data needed to change a user's password
 */
export interface ChangePasswordRequest {
  current_password: string;
  new_password: string;
}
